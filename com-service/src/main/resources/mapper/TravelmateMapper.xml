<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jigubangbang.com_service.repository.TravelmateMapper">
    <select id="selectAllCountries" resultType="com.jigubangbang.com_service.model.CountryDto">
        SELECT 
            id,
            name,
            continent
        FROM country
        ORDER BY name ASC
    </select>

    <select id="selectCitiesByCountryId" parameterType="String" resultType="com.jigubangbang.com_service.model.CityDto">
        SELECT 
            id,
            city_name as cityName,
            country_id as countryId
        FROM city
        WHERE country_id = #{countryId}
        ORDER BY city_name ASC
    </select>

    <select id="selectAllTargets" resultType="com.jigubangbang.com_service.model.TargetDto">
        SELECT 
            id,
            code,
            label
        FROM travel_theme
        WHERE code LIKE 'TARGET_%'
        ORDER BY id ASC
    </select>

    <select id="selectAllThemes" resultType="com.jigubangbang.com_service.model.ThemeDto">
        SELECT 
            id,
            code,
            label
        FROM travel_theme
        WHERE code LIKE 'THEME_%'
        ORDER BY id ASC
    </select>

    <select id="selectAllTravelStyles" resultType="com.jigubangbang.com_service.model.TravelStyleDto">
        SELECT 
            id,
            label
        FROM travel_style
        ORDER BY id ASC
    </select>

    <select id="findTravelmateList" resultType="java.util.Map">
        SELECT DISTINCT
            tp.id,
            tp.title,
            tp.simple_description AS simpleDescription,
            tp.thumbnail_image AS thumbnailImage,
            u.nickname AS creatorNickname,
            ts.label AS creatorStyle,
            tp.start_at AS startAt,
            tp.end_at AS endAt,
            tp.view_count AS viewCount,
            tp.status,
            tp.is_public AS isPublic,
            
            COALESCE(like_counts.like_count, 0) AS likeCount,
            COALESCE(member_counts.member_count, 0) AS memberCount,
            
            <!-- 지역 정보 -->
            GROUP_CONCAT(DISTINCT CONCAT(c.name, ' ', ci.city_name) SEPARATOR ', ') AS locationNames,
            
            <!-- 테마 정보 (targets + themes 합쳐서) -->
            GROUP_CONCAT(DISTINCT CASE WHEN tt.code LIKE 'THEME_%' THEN tt.label END SEPARATOR ', ') AS themeNames,

            
            <!-- 스타일 정보 -->
            GROUP_CONCAT(DISTINCT style.label SEPARATOR ', ') AS styleNames,
            
            <!-- 타겟 정보는 테마와 같이 처리되므로 별도로 조회 -->
            (SELECT GROUP_CONCAT(DISTINCT target_theme.label SEPARATOR ', ')
             FROM travelmate_theme tmt_target
             JOIN travel_theme target_theme ON tmt_target.theme_id = target_theme.id
             WHERE tmt_target.mate_id = tp.id 
             AND target_theme.code LIKE 'TARGET_%') AS targetNames,

             tp.blind_status as blindStatus
        FROM travelmate_post tp
        JOIN user u ON tp.creator_id = u.user_id
        LEFT JOIN travel_style ts ON u.travel_style_id = ts.id
        
        <!-- 지역 조인 -->
        LEFT JOIN travelmate_region tr ON tp.id = tr.mate_id
        LEFT JOIN country c ON tr.country_id = c.id
        LEFT JOIN city ci ON tr.city_id = ci.id
        
        <!-- 테마 조인 (targets와 themes 모두 포함) -->
        LEFT JOIN travelmate_theme tmt ON tp.id = tmt.mate_id
        LEFT JOIN travel_theme tt ON tmt.theme_id = tt.id
        
        <!-- 스타일 조인 -->
        LEFT JOIN travelmate_style tms ON tp.id = tms.mate_id
        LEFT JOIN travel_style style ON tms.style_id = style.id
        
        <!-- 좋아요 수 계산 -->
        LEFT JOIN (
            SELECT mate_id, COUNT(*) AS like_count
            FROM travelmate_like
            GROUP BY mate_id
        ) like_counts ON tp.id = like_counts.mate_id

        LEFT JOIN (
            SELECT group_id AS mate_id, COUNT(*) AS member_count
            FROM group_user
            WHERE group_type = 'TRAVELMATE'
            GROUP BY group_id
        ) member_counts ON tp.id = member_counts.mate_id
        
        WHERE tp.is_public = true
        
        <!-- 완료된 모임 필터 -->
        <if test="!showCompleted">
            AND tp.status = 'ACTIVE'
        </if>

        <if test="startDate != null and startDate != ''">
            AND tp.start_at &gt;= #{startDate}
        </if>

        <if test="endDate != null and endDate != ''">
            AND tp.end_at &lt;= #{endDate}
        </if>

        <if test="continents != null and continents.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_region tr_continent
                LEFT JOIN country c_continent ON tr_continent.country_id = c_continent.id
                WHERE tr_continent.mate_id = tp.id
                AND c_continent.continent IN
                <foreach collection="continents" item="continent" open="(" close=")" separator=",">
                    #{continent}
                </foreach>
            )
        </if>
        
        <!-- 지역 필터 -->
        <if test="locations != null and locations.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_region tr2
                WHERE tr2.mate_id = tp.id
                AND CONCAT(tr2.country_id, '-', tr2.city_id) IN
                <foreach collection="locations" item="location" open="(" close=")" separator=",">
                    #{location}
                </foreach>
            )
        </if>
        
        <!-- 타겟 필터 -->
        <if test="targets != null and targets.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_theme tmt2
                WHERE tmt2.mate_id = tp.id
                AND tmt2.theme_id IN
                <foreach collection="targets" item="target" open="(" close=")" separator=",">
                    #{target}
                </foreach>
            )
        </if>
        
        <!-- 테마 필터 -->
        <if test="themes != null and themes.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_theme tmt3
                WHERE tmt3.mate_id = tp.id
                AND tmt3.theme_id IN
                <foreach collection="themes" item="theme" open="(" close=")" separator=",">
                    #{theme}
                </foreach>
            )
        </if>
        
        <!-- 스타일 필터 -->
        <if test="styles != null and styles.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_style tms2
                WHERE tms2.mate_id = tp.id
                AND tms2.style_id IN
                <foreach collection="styles" item="style" open="(" close=")" separator=",">
                    #{style}
                </foreach>
            )
        </if>
        
        <!-- 검색 필터 -->
        <if test="search != null and search != ''">
            AND (tp.title LIKE CONCAT('%', #{search}, '%')
                 OR tp.simple_description LIKE CONCAT('%', #{search}, '%')
                 OR tp.description LIKE CONCAT('%', #{search}, '%'))
        </if>
        
        GROUP BY tp.id, tp.title, tp.simple_description, tp.thumbnail_image, 
                 u.nickname, ts.label, tp.start_at, tp.end_at, tp.view_count, 
                 tp.status, like_counts.like_count, tp.blind_status
        
        <!-- 정렬 -->
        <choose>
            <when test="sortOption == 'latest'">
                ORDER BY tp.created_at DESC
            </when>
            <when test="sortOption == 'period'">
                ORDER BY ABS(DATEDIFF(tp.start_at, NOW())) ASC
            </when>
            <when test="sortOption == 'likes'">
                ORDER BY like_counts.like_count DESC, tp.created_at DESC
            </when>
            <otherwise>
                ORDER BY tp.id DESC
            </otherwise>
        </choose>
        
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 여행메이트 총 개수 조회 -->
    <select id="countTravelmateList" resultType="long">
        SELECT COUNT(DISTINCT tp.id)
        FROM travelmate_post tp
        
        WHERE tp.is_public = true
        
        <!-- 완료된 모임 필터 -->
        <if test="!showCompleted">
            AND tp.status = 'ACTIVE'
        </if>

        <if test="startDate != null and startDate != ''">
            AND tp.start_at &gt;= #{startDate}
        </if>

        <if test="endDate != null and endDate != ''">
            AND tp.end_at &lt;= #{endDate}
        </if>

        <if test="continents != null and continents.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_region tr_continent
                LEFT JOIN country c_continent ON tr_continent.country_id = c_continent.id
                WHERE tr_continent.mate_id = tp.id
                AND c_continent.continent IN
                <foreach collection="continents" item="continent" open="(" close=")" separator=",">
                    #{continent}
                </foreach>
            )
        </if>
        
        <!-- 지역 필터 -->
        <if test="locations != null and locations.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_region tr
                WHERE tr.mate_id = tp.id
                AND CONCAT(tr.country_id, '-', tr.city_id) IN
                <foreach collection="locations" item="location" open="(" close=")" separator=",">
                    #{location}
                </foreach>
            )
        </if>
        
        <!-- 타겟 필터 -->
        <if test="targets != null and targets.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_theme tmt
                WHERE tmt.mate_id = tp.id
                AND tmt.theme_id IN
                <foreach collection="targets" item="target" open="(" close=")" separator=",">
                    #{target}
                </foreach>
            )
        </if>
        
        <!-- 테마 필터 -->
        <if test="themes != null and themes.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_theme tmt
                WHERE tmt.mate_id = tp.id
                AND tmt.theme_id IN
                <foreach collection="themes" item="theme" open="(" close=")" separator=",">
                    #{theme}
                </foreach>
            )
        </if>
        
        <!-- 스타일 필터 -->
        <if test="styles != null and styles.size() > 0">
            AND EXISTS (
                SELECT 1 FROM travelmate_style tms
                WHERE tms.mate_id = tp.id
                AND tms.style_id IN
                <foreach collection="styles" item="style" open="(" close=")" separator=",">
                    #{style}
                </foreach>
            )
        </if>
        
        <!-- 검색 필터 -->
        <if test="search != null and search != ''">
            AND (tp.title LIKE CONCAT('%', #{search}, '%')
                 OR tp.simple_description LIKE CONCAT('%', #{search}, '%')
                 OR tp.description LIKE CONCAT('%', #{search}, '%'))
        </if>
    </select>

    <!-- 사용자가 좋아요한 게시글 ID 목록 조회 -->
    <select id="findLikedPostIdsByUserId" parameterType="string" resultType="long">
        SELECT mate_id
        FROM travelmate_like
        WHERE user_id = #{userId}
    </select>

    <!-- 좋아요 추가 -->
    <insert id="insertLike">
        INSERT INTO travelmate_like (mate_id, user_id, created_at)
        VALUES (#{postId}, #{userId}, NOW())
    </insert>

    <!-- 좋아요 제거 -->
    <delete id="deleteLike">
        DELETE FROM travelmate_like
        WHERE mate_id = #{postId} AND user_id = #{userId}
    </delete>

    <!-- 좋아요 존재 여부 확인 -->
    <select id="existsLike" resultType="boolean">
        SELECT COUNT(*) &gt; 0
        FROM travelmate_like
        WHERE mate_id = #{postId} AND user_id = #{userId}
    </select>

    <!-- 게시글 존재 여부 확인 -->
    <select id="existsPost" parameterType="long" resultType="boolean">
        SELECT COUNT(*) &gt; 0
        FROM travelmate_post
        WHERE id = #{postId} AND is_public = true AND blind_status = 'VISIBLE'
    </select>

    <select id="findTravelmateDetail" resultType="java.util.Map">
        SELECT DISTINCT
            tp.id,
            tp.title,
            tp.simple_description AS simpleDescription,
            tp.description,
            tp.application_description AS applicationDescription,
            tp.thumbnail_image AS thumbnailImage,
            tp.background_image AS backgroundImage,
            u.user_id AS creatorId,
            u.nickname AS creatorNickname,
            u.profile_image AS creatorProfileImage,
            ts.label AS creatorStyle,
            tp.start_at AS startAt,
            tp.end_at AS endAt,
            tp.view_count AS viewCount,
            tp.status,
            tp.blind_status AS blindStatus,
            tp.is_public AS isPublic,
            
            COALESCE(like_counts.like_count, 0) AS likeCount,
            COALESCE(member_counts.member_count, 0) AS memberCount,
            
            <!-- 지역 정보 -->
            GROUP_CONCAT(DISTINCT CONCAT(c.name, ' ', ci.city_name) SEPARATOR ', ') AS locationNames,
            
            <!-- 테마 정보 (THEME_만) -->
            GROUP_CONCAT(DISTINCT CASE WHEN tt.code LIKE 'THEME_%' THEN tt.label END SEPARATOR ', ') AS themeNames,
            
            <!-- 스타일 정보 -->
            GROUP_CONCAT(DISTINCT style.label SEPARATOR ', ') AS styleNames,
            
            <!-- 타겟 정보 -->
            (SELECT GROUP_CONCAT(DISTINCT target_theme.label SEPARATOR ', ')
            FROM travelmate_theme tmt_target
            JOIN travel_theme target_theme ON tmt_target.theme_id = target_theme.id
            WHERE tmt_target.mate_id = tp.id 
            AND target_theme.code LIKE 'TARGET_%') AS targetNames

        FROM travelmate_post tp
        JOIN user u ON tp.creator_id = u.user_id
        LEFT JOIN travel_style ts ON u.travel_style_id = ts.id
        
        <!-- 지역 조인 -->
        LEFT JOIN travelmate_region tr ON tp.id = tr.mate_id
        LEFT JOIN country c ON tr.country_id = c.id
        LEFT JOIN city ci ON tr.city_id = ci.id
        
        <!-- 테마 조인 -->
        LEFT JOIN travelmate_theme tmt ON tp.id = tmt.mate_id
        LEFT JOIN travel_theme tt ON tmt.theme_id = tt.id
        
        <!-- 스타일 조인 -->
        LEFT JOIN travelmate_style tms ON tp.id = tms.mate_id
        LEFT JOIN travel_style style ON tms.style_id = style.id
        
        <!-- 좋아요 수 계산 -->
        LEFT JOIN (
            SELECT mate_id, COUNT(*) AS like_count
            FROM travelmate_like
            GROUP BY mate_id
        ) like_counts ON tp.id = like_counts.mate_id
        
        <!-- 멤버수 계산 -->
        LEFT JOIN (
            SELECT group_id AS mate_id, COUNT(*) AS member_count
            FROM group_user
            WHERE group_type = 'TRAVELMATE'
            GROUP BY group_id
        ) member_counts ON tp.id = member_counts.mate_id
        
        WHERE tp.id = #{postId}
        AND tp.is_public = true
        
        GROUP BY tp.id, tp.title, tp.simple_description, tp.description, tp.application_description,
                tp.thumbnail_image, tp.background_image, u.user_id, u.nickname, u.profile_image, ts.label, 
                tp.start_at, tp.end_at, tp.view_count, tp.status, tp.blind_status,
                like_counts.like_count, member_counts.member_count
    </select>

    <select id="findMemberApplicationStatus" resultType="string">
        SELECT status
        FROM travelmate_application
        WHERE mate_id = #{postId} AND user_id = #{userId}
    </select>

    <select id="findPostStatus" resultType="string">
        SELECT status
        FROM travelmate_post
        WHERE id = #{postId} AND is_public = true
    </select>

    <select id="findPostCreatorId" resultType="string">
        SELECT creator_id
        FROM travelmate_post
        WHERE id = #{postId} AND is_public = true
    </select>

    <insert id="insertMemberApplication">
        INSERT INTO travelmate_application (mate_id, user_id, status, application_comment, applied_at)
        VALUES (#{postId}, #{userId}, 'PENDING', #{description}, NOW())
    </insert>

    <delete id="deleteMemberApplication">
        DELETE FROM travelmate_application
        WHERE mate_id = #{postId} AND user_id = #{userId}
    </delete>

    <select id="getTravelmateMembers" resultType="com.jigubangbang.com_service.model.TravelmateMemberDto">
        SELECT 
            u.user_id as userId,
            u.nickname,
            ts.label as travelStyle,
            u.bio,
            u.profile_image as profileImage
        FROM group_user gu
        INNER JOIN user u ON gu.user_id = u.user_id
        LEFT JOIN travel_style ts ON u.travel_style_id=ts.id
        WHERE gu.group_type = 'TRAVELMATE'
        AND gu.group_id = #{postId}
        ORDER BY gu.joined_at ASC
    </select>

    <select id="getTravelmateComments" resultType="com.jigubangbang.com_service.model.TravelmateCommentDto">
        SELECT 
            tc.id,
            tc.user_id as userId,
            u.nickname,
            u.profile_image as profileImage,
            tc.mate_id as mateId,
            tc.content,
            tc.level,
            tc.parent_id as parentId,
            DATE_FORMAT(tc.created_at, '%Y-%m-%d %H:%i:%s') as createdAt,
            DATE_FORMAT(tc.updated_at, '%Y-%m-%d %H:%i:%s') as updatedAt,
            tc.blind_status as blindStatus,
            tc.is_deleted as isDeleted
        FROM travelmate_comment tc
        INNER JOIN user u ON tc.user_id = u.user_id
        WHERE tc.mate_id = #{postId}
        ORDER BY tc.created_at ASC
    </select>

    <insert id="insertComment">
        INSERT INTO travelmate_comment (
            user_id,
            mate_id,
            content,
            level,
            parent_id,
            created_at,
            updated_at,
            blind_status,
            is_deleted
        ) VALUES (
            #{userId},
            #{mateId},
            #{content},
            #{level},
            #{parentId},
            NOW(),
            NOW(),
            'VISIBLE',
            false
        )
    </insert>

    <select id="existsComment" resultType="boolean">
        SELECT COUNT(*) &gt; 0
        FROM travelmate_comment
        WHERE id = #{commentId}
        AND mate_id = #{mateId}
        AND is_deleted = false
    </select>

    <select id="getCommentLevel" resultType="Integer">
        SELECT level
        FROM travelmate_comment
        WHERE id = #{commentId}
        AND is_deleted = false
    </select>

    <select id="getCommentById" resultType="com.jigubangbang.com_service.model.TravelmateCommentDto">
        SELECT 
            id,
            user_id as userId,
            mate_id as mateId,
            content,
            level,
            parent_id as parentId,
            blind_status as blindStatus,
            is_deleted as isDeleted
        FROM travelmate_comment
        WHERE id = #{commentId}
    </select>

    <update id="updateComment">
        UPDATE travelmate_comment
        SET content = #{content},
            updated_at = NOW()
        WHERE id = #{commentId}
    </update>

    <update id="softDeleteComment">
        UPDATE travelmate_comment
        SET is_deleted = true,
            updated_at = NOW()
        WHERE id = #{commentId}
    </update>

    <update id="softDeleteCommentWithReplies">
        UPDATE travelmate_comment
        SET content = '삭제된 댓글입니다.',
            is_deleted = true,
            updated_at = NOW()
        WHERE id = #{commentId}
    </update>

    <select id="getReplyCount" resultType="int">
        SELECT COUNT(*)
        FROM travelmate_comment
        WHERE parent_id = #{parentId}
        AND is_deleted = false
    </select>

    <!-- 모임 기본 정보 업데이트 -->
    <update id="updateTravelmate" parameterType="com.jigubangbang.com_service.model.TravelmateUpdateDto">
        UPDATE travelmate_post SET
            title = #{title},
            simple_description = #{simpleDescription},
            description = #{description},
            application_description = #{applicationDescription},
            background_image = #{backgroundImage},
            thumbnail_image = #{thumbnailImage},
            start_at = #{startAt},
            end_at = #{endAt},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 기존 연관 데이터 삭제 -->
    <delete id="deleteTravelmateLocations">
        DELETE FROM travelmate_region WHERE mate_id = #{travelmateId}
    </delete>

    <delete id="deleteTravelmateThemes">
        DELETE FROM travelmate_theme WHERE mate_id = #{travelmateId}
    </delete>

    <delete id="deleteTravelmateStyles">
        DELETE FROM travelmate_style WHERE mate_id = #{travelmateId}
    </delete>

    <!-- 새로운 연관 데이터 등록 -->
    <insert id="insertTravelmateLocation">
        INSERT INTO travelmate_region (mate_id, country_id, city_id)
        VALUES (#{travelmateId}, #{countryId}, #{cityId})
    </insert>

    <insert id="insertTravelmateTheme">
        INSERT INTO travelmate_theme (mate_id, theme_id)
        VALUES (#{travelmateId}, #{themeId})
    </insert>

    <insert id="insertTravelmateStyle">
        INSERT INTO travelmate_style (mate_id, style_id)
        VALUES (#{travelmateId}, #{styleId})
    </insert>

    <!-- 모임 조회 (권한 확인용) -->
    <select id="findById" resultType="com.jigubangbang.com_service.model.Travelmate">
        SELECT 
            id,
            creator_id as creatorId,
            title,
            status,
            created_at as createdAt
        FROM travelmate_post 
        WHERE id = #{id}
    </select>

    <!-- 모임 생성 -->
    <insert id="insertTravelmate" parameterType="com.jigubangbang.com_service.model.TravelmateCreateDto" 
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO travelmate_post (
            title,
            simple_description,
            description,
            application_description,
            background_image,
            thumbnail_image,
            creator_id,
            start_at,
            end_at,
            status,
            blind_status,
            view_count,
            created_at,
            updated_at
        ) VALUES (
            #{title},
            #{simpleDescription},
            #{description},
            #{applicationDescription},
            #{backgroundImage},
            #{thumbnailImage},
            #{creatorId},
            #{startAt},
            #{endAt},
            #{status},
            #{blindStatus},
            #{viewCount},
            #{createdAt},
            #{updatedAt}
        )
    </insert>

    <!-- 멤버 등록 (생성자 자동 등록) -->
    <insert id="insertTravelmateMember">
        INSERT INTO group_user (
            group_type,
            group_id, 
            user_id, 
            is_creator, 
            joined_at
        ) VALUES (
            'TRAVELMATE',
            #{travelmateId}, 
            #{userId}, 
            #{isCreator}, 
            NOW()
        )
    </insert>

    <select id="selectTravelmateForDelete" parameterType="long" resultType="com.jigubangbang.com_service.model.TravelmateResponseDto">
        SELECT 
            id,
            creator_id AS creatorId,
            title,
            simple_description AS simpleDescription,
            description,
            application_description AS applicationDescription,
            background_image AS backgroundImage,
            thumbnail_image AS thumbnailImage,
            status,
            start_at AS startAt,
            end_at AS endAt,
            created_at AS createdAt,
            blind_status AS blindStatus
        FROM travelmate_post 
        WHERE id = #{travelmateId}
    </select>

    <!-- 여행자모임 삭제 (하드 삭제) -->
    <delete id="deleteTravelmateById" parameterType="long">
        DELETE FROM travelmate_post 
        WHERE id = #{travelmateId}
    </delete>

    <!-- 채팅 메시지 삭제 -->
    <delete id="deleteChatMessagesByTravelmateId" parameterType="long">
        DELETE cm FROM chat_message cm
        INNER JOIN chat_room cr ON cm.chat_id = cr.id
        WHERE cr.group_type = 'TRAVELMATE' 
          AND cr.group_id = #{travelmateId}
    </delete>

    <!-- 그룹 회원 삭제 (채팅 참여자) -->
    <delete id="deleteGroupUsersByTravelmateId" parameterType="long">
        DELETE FROM group_user 
        WHERE group_type = 'TRAVELMATE' 
          AND group_id = #{travelmateId}
    </delete>

    <!-- 채팅방 삭제 -->
    <delete id="deleteChatRoomByTravelmateId" parameterType="long">
        DELETE FROM chat_room 
        WHERE group_type = 'TRAVELMATE' 
          AND group_id = #{travelmateId}
    </delete>

    <!-- 자식 댓글 삭제 (대댓글) -->
    <delete id="deleteTravelmateChildComments" parameterType="long">
        DELETE FROM travelmate_comment 
        WHERE mate_id = #{travelmateId} 
          AND parent_id IS NOT NULL
    </delete>

    <!-- 부모 댓글 삭제 (원댓글) -->
    <delete id="deleteTravelmateParentComments" parameterType="long">
        DELETE FROM travelmate_comment 
        WHERE mate_id = #{travelmateId} 
          AND parent_id IS NULL
    </delete>

    <!-- 좋아요 정보 삭제 -->
    <delete id="deleteTravelmateLikes" parameterType="long">
        DELETE FROM travelmate_like 
        WHERE mate_id = #{travelmateId}
    </delete>

    <!-- 신청 정보 삭제 -->
    <delete id="deleteTravelmateApplications" parameterType="long">
        DELETE FROM travelmate_application 
        WHERE mate_id = #{travelmateId}
    </delete>

    <!-- 지역 정보 삭제 -->
    <delete id="deleteTravelmateRegions" parameterType="long">
        DELETE FROM travelmate_region 
        WHERE mate_id = #{travelmateId}
    </delete>

    <!-- 신청 정보 조회 -->
    <select id="getApplicationById" resultType="com.jigubangbang.com_service.model.TravelmateApplicationDto">
        SELECT 
            id,
            mate_id AS mateId,
            user_id AS userId,
            application_comment AS applicationComment,
            status,
            applied_at AS appliedAt,
            responded_at AS respondedAt
        FROM travelmate_application
        WHERE id = #{applicationId}
    </select>

    <!-- 신청 상태 업데이트 -->
    <update id="updateApplicationStatus">
        UPDATE travelmate_application
        SET status = #{status},
            responded_at = NOW()
        WHERE id = #{applicationId}
    </update>

    <!-- 그룹 멤버 추가 -->
    <insert id="addGroupMember">
        INSERT INTO group_user (
            user_id,
            group_type,
            group_id,
            joined_at
        ) VALUES (
            #{userId},
            #{groupType},
            #{groupId},
            NOW()
        )
    </insert>

    <!-- 여행 모임 정보 조회 -->
    <select id="getTravelmateById" resultType="com.jigubangbang.com_service.model.TravelmatePostDto">
        SELECT 
            id,
            creator_id AS creatorId,
            title,
            status
        FROM travelmate_post
        WHERE id = #{travelmateId}
        AND status != 'DELETED'
    </select>

        <select id="findPostTitle" parameterType="long" resultType="string">
        SELECT title 
        FROM travelmate_post
        WHERE id = #{postId}
    </select>

    <delete id="deleteApplicationById" parameterType="int">
        DELETE FROM travelmate_application 
        WHERE id = #{applicationId}
    </delete>

    <select id="getTravelmateStatus" parameterType="long" resultType="com.jigubangbang.com_service.model.TravelmateStatusDto">
        SELECT 
            id,
            blind_status AS blindStatus
        FROM travelmate_post 
        WHERE id = #{postId}
    </select>

    <update id="updateExpiredTravelmates">
        UPDATE travelmate_post 
        SET status = 'END', updated_at = NOW()
        WHERE status = 'ACTIVE' 
        AND end_at &lt; NOW()
    </update>

    <update id="updateTravelmateStatusIfExpired">
        UPDATE travelmate_post 
        SET status = 'END', updated_at = NOW()
        WHERE id = #{postId}
        AND status = 'ACTIVE' 
        AND end_at &lt; NOW()
    </update>

    <select id="findNicknameById" parameterType="String" resultType="String">
        SELECT nickname from user where user_id=#{userId}
    </select>
</mapper>